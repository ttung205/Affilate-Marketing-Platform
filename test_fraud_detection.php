<?php

/**
 * Test Fraud Detection System
 * 
 * Ch·∫°y file n√†y ƒë·ªÉ test c√°c scenarios c·ªßa fraud detection
 * php artisan tinker < test_fraud_detection.php
 * ho·∫∑c: ddev php artisan tinker < test_fraud_detection.php
 */

require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel Application
$app = require_once __DIR__.'/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

use App\Services\FraudDetectionService;
use App\Models\AffiliateLink;
use App\Models\User;

echo "üõ°Ô∏è  KI·ªÇM TRA H·ªÜ TH·ªêNG PH√ÅT HI·ªÜN GIAN L·∫¨N\n";
echo "==========================================\n\n";

// L·∫•y ho·∫∑c t·∫°o m·ªôt affiliate link test t·ª´ database
$testAffiliateLink = AffiliateLink::first();

if (!$testAffiliateLink) {
    echo "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y affiliate link n√†o trong database.\n";
    echo "ƒêang t·∫°o affiliate link test...\n\n";
    
    // L·∫•y publisher user ƒë·∫ßu ti√™n
    $publisher = User::where('role', 'publisher')->first();
    
    if (!$publisher) {
        echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y publisher user. Vui l√≤ng t·∫°o publisher user tr∆∞·ªõc.\n";
        exit(1);
    }
    
    // T·∫°o affiliate link test
    $testAffiliateLink = AffiliateLink::create([
        'publisher_id' => $publisher->id,
        'product_id' => null, // C√≥ th·ªÉ null cho link t·ªïng qu√°t
        'campaign_id' => null,
        'tracking_code' => 'TEST_' . strtoupper(substr(md5(time()), 0, 8)),
        'destination_url' => 'https://example.com',
        'status' => 'active',
        'clicks_count' => 0,
        'conversions_count' => 0,
        'total_commission' => 0,
    ]);
    
    echo "‚úÖ ƒê√£ t·∫°o affiliate link test: {$testAffiliateLink->tracking_code}\n\n";
}

echo "S·ª≠ d·ª•ng Affiliate Link ID: {$testAffiliateLink->id}\n";
echo "M√£ Tracking: {$testAffiliateLink->tracking_code}\n\n";

$fraudService = new FraudDetectionService();

// C√°c tr∆∞·ªùng h·ª£p ki·ªÉm tra
$testCases = [
    [
        'name' => '‚úÖ Test 1: Click b√¨nh th∆∞·ªùng (Ng∆∞·ªùi d√πng h·ª£p l·ªá)',
        'ip' => '192.168.1.100',
        'userAgent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'expected' => 'PASS (Kh√¥ng gian l·∫≠n)',
    ],
    [
        'name' => '‚ùå Test 2: User Agent l√† Bot',
        'ip' => '192.168.1.101',
        'userAgent' => 'python-requests/2.28.1 bot crawler',
        'expected' => 'FAIL (Ph√°t hi·ªán Bot)',
    ],
    [
        'name' => '‚ùå Test 3: User Agent r·ªóng',
        'ip' => '192.168.1.102',
        'userAgent' => '',
        'expected' => 'FAIL (User Agent nghi ng·ªù)',
    ],
    [
        'name' => '‚ùå Test 4: User Agent qu√° ng·∫Øn',
        'ip' => '192.168.1.103',
        'userAgent' => 'curl/7.68',
        'expected' => 'FAIL (User Agent nghi ng·ªù)',
    ],
    [
        'name' => '‚úÖ Test 5: Bot h·ª£p l·ªá (GoogleBot)',
        'ip' => '192.168.1.104',
        'userAgent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
        'expected' => 'PASS (Bot h·ª£p l·ªá)',
    ],
    [
        'name' => '‚ùå Test 6: Pattern Scraper',
        'ip' => '192.168.1.105',
        'userAgent' => 'Mozilla/5.0 (compatible; scraper/1.0)',
        'expected' => 'FAIL (Ph√°t hi·ªán Scraper)',
    ],
    [
        'name' => '‚ùå Test 7: Headless Browser',
        'ip' => '192.168.1.106',
        'userAgent' => 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/120.0.0.0 Safari/537.36',
        'expected' => 'FAIL (Ph√°t hi·ªán Headless)',
    ],
];

echo "ƒêang ch·∫°y " . count($testCases) . " tr∆∞·ªùng h·ª£p ki·ªÉm tra...\n\n";

$passCount = 0;
$failCount = 0;

foreach ($testCases as $index => $test) {
    echo ($index + 1) . ". {$test['name']}\n";
    echo "   IP: {$test['ip']}\n";
    echo "   User Agent: " . substr($test['userAgent'], 0, 60) . (strlen($test['userAgent']) > 60 ? '...' : '') . "\n";
    
    try {
        $result = $fraudService->detectFraud(
            $testAffiliateLink,
            $test['ip'],
            $test['userAgent']
        );
        
        $status = $result['is_fraud'] ? 'üö´ GIAN L·∫¨N' : '‚úÖ S·∫†CH';
        echo "   K·∫øt qu·∫£: {$status}\n";
        echo "   ƒêi·ªÉm r·ªßi ro: {$result['risk_score']}\n";
        
        if (!empty($result['checks'])) {
            echo "   C√°c ki·ªÉm tra:\n";
            foreach ($result['checks'] as $check) {
                echo "      - {$check}\n";
            }
        }
        
        // X√°c th·ª±c v·ªõi k·∫øt qu·∫£ mong ƒë·ª£i
        $expectedFraud = strpos($test['expected'], 'FAIL') !== false;
        $actualFraud = $result['is_fraud'];
        
        if ($expectedFraud === $actualFraud) {
            echo "   ‚úÖ Test ƒê·∫†T\n";
            $passCount++;
        } else {
            echo "   ‚ùå Test KH√îNG ƒê·∫†T (Mong ƒë·ª£i: {$test['expected']})\n";
            $failCount++;
        }
        
    } catch (\Exception $e) {
        echo "   ‚ùå L·ªói: {$e->getMessage()}\n";
        $failCount++;
    }
    
    echo "\n";
}

// T√≥m t·∫Øt
echo "==========================================\n";
echo "üìä T·ªîNG K·∫æT KI·ªÇM TRA\n";
echo "==========================================\n";
echo "T·ªïng s·ªë test: " . count($testCases) . "\n";
echo "‚úÖ ƒê·∫°t: {$passCount}\n";
echo "‚ùå Kh√¥ng ƒë·∫°t: {$failCount}\n";
echo "T·ª∑ l·ªá th√†nh c√¥ng: " . round(($passCount / count($testCases)) * 100, 2) . "%\n\n";

// Demo b·ªï sung: Gi·ªõi h·∫°n t·∫ßn su·∫•t
echo "==========================================\n";
echo "üîÑ KI·ªÇM TRA GI·ªöI H·∫†N T·∫¶N SU·∫§T\n";
echo "==========================================\n\n";

echo "M√¥ ph·ªèng 15 click t·ª´ c√πng IP (Gi·ªõi h·∫°n: 10 click/gi·ªù)...\n\n";

$testIp = '10.0.0.50';
$testUserAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/120.0.0.0';

for ($i = 1; $i <= 15; $i++) {
    // L∆∞u √Ω: Trong h·ªá th·ªëng th·ª±c t·∫ø, b·ªô ƒë·∫øm click s·∫Ω tƒÉng qua cache
    // V·ªõi m·ª•c ƒë√≠ch demo, ch√∫ng ta ch·ªâ hi·ªÉn th·ªã logic
    
    echo "Click #{$i}: ";
    
    $result = $fraudService->detectFraud(
        $testAffiliateLink,
        $testIp,
        $testUserAgent
    );
    
    if ($result['is_fraud']) {
        echo "üö´ B·ªä CH·∫∂N (R·ªßi ro: {$result['risk_score']})\n";
        if ($i >= 10) {
            echo "   ‚úÖ Gi·ªõi h·∫°n t·∫ßn su·∫•t ho·∫°t ƒë·ªông ƒë√∫ng!\n";
        }
    } else {
        echo "‚úÖ CHO PH√âP (R·ªßi ro: {$result['risk_score']})\n";
    }
    
    // M√¥ ph·ªèng tƒÉng b·ªô ƒë·∫øm (trong h·ªá th·ªëng th·ª±c ƒë∆∞·ª£c th·ª±c hi·ªán qua cache)
    // $fraudService->incrementClickCounter($testIp);
}

echo "\n";
echo "==========================================\n";
echo "‚úÖ Ho√†n th√†nh t·∫•t c·∫£ c√°c test!\n";
echo "==========================================\n";

echo "\nüìù GHI CH√ö:\n";
echo "- H·ªá th·ªëng ph√°t hi·ªán gian l·∫≠n ho·∫°t ƒë·ªông nh∆∞ mong ƒë·ª£i\n";
echo "- C√°c pattern Bot ƒë∆∞·ª£c ph√°t hi·ªán ch√≠nh x√°c\n";
echo "- Logic gi·ªõi h·∫°n t·∫ßn su·∫•t ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai\n";
echo "- Nh·ªõ ch·∫°y migration: php artisan migrate\n";
echo "- Gi√°m s√°t log gian l·∫≠n t·∫°i: /admin/fraud-detection\n\n";

